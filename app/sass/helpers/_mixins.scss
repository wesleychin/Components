@mixin background-image-gradient($angle, $colorini, $spreadini,$colorfinal, $spreadfinal) {
   background-image: -moz-linear-gradient($angle,$colorini $spreadini,$colorfinal $spreadfinal);
   background-image: -webkit-linear-gradient($angle,$colorini $spreadini,$colorfinal $spreadfinal);
   background-image: -ms-linear-gradient($angle,$colorini $spreadini,$colorfinal $spreadfinal);
}

@mixin box-shadow-inset($hor,$ver,$blur,$spread,$color) {
	-webkit-box-shadow: inset $hor $ver $blur $spread $color;
	-moz-box-shadow: inset $hor $ver $blur $spread $color;
	box-shadow: inset $hor $ver $blur $spread $color;

}
@mixin box-shadow($hor,$ver,$blur,$spread,$color) {
	-webkit-box-shadow: $hor $ver $blur $spread $color;
	-moz-box-shadow: $hor $ver $blur $spread $color;
	box-shadow:  $hor $ver $blur $spread $color;

}
@mixin border-radius($radius){
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
     border-radius: $radius;
}
@mixin transform($scale){
    -moz-transform: scale($scale);
    -webkit-transform: scale($scale);
    -o-transform: scale($scale);
    -ms-transform: scale($scale);
    transform: scale($scale)
}
@mixin opacity ( $value: 0.5 ){ 
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" $value * 100 ")";
    filter: alpha(opacity= $value * 100 );
    zoom: 1;
}
@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}
@mixin cover-background($img-uri, $background-top:"center", $background-left:"center", $background-attachment:"fixed") {
  background: url($img-uri) no-repeat unquote($background-top) unquote($background-left) unquote($background-attachment); 
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;  
}


@mixin safe-rem($property: font-size, $num: 14){
  $valid: true;
  @if type-of($property) != "string" {
    @warn "property: #{$property} is not a string";
    $valid: false;
  }
  @if type-of($num) != "number" {
    @warn "num: #{$num} is not a number";
    $valid: false;
  }
  @if $valid == true {
    #{$property}: #{_strip-unit($num)}px;
  }
}

// Strips unit suffix from value
@function _strip-unit($num) {
  @if type-of($num) != "number" {
    @warn "num: #{$num} is not a number";
    @return null;
  }
  @return $num / ($num * 0 + 1);
}